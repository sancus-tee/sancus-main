# ---------------------------------------------------------------------------
PKG_MAINTAINER    = 'Jan Tobias Muehlberg <jantobias.muehlberg@cs.kuleuven.be>'

# ---------------------------------------------------------------------------
# Package config for LLVM/CLANG

ifeq ($(OTHER),0)
    ifeq ($(DEBIAN),1)
        ifeq ($(OS_VERS),9.4)
            LLVM_VER     = 4.0.1
            LLVM_PKG_REL = 2
            TI_MSPGCC_VER = 6.4.0.32
        else
            $(error Unsupported OS version: $(OS_VERS))
        endif
    else
    ifeq ($(UBUNTU),1)
        ifeq ($(OS_VERS),16.04)
            LLVM_VER      = 4.0.0
            LLVM_PKG_REL  =
            TI_MSPGCC_VER = 6.4.0.32
        else
        ifeq ($(OS_VERS),18.04)
            LLVM_VER      = 4.0.1
            LLVM_PKG_REL  = 2
            TI_MSPGCC_VER = 6.4.0.32
        else
        ifeq ($(OS_VERS),20.04)
            LLVM_VER      = 4.0.1
            LLVM_PKG_REL  = 2
            TI_MSPGCC_VER = 6.4.0.32
        else
        ifeq ($(OS_VERS),22.04)
            LLVM_VER      = 4.0.1
            LLVM_PKG_REL  = 2
            TI_MSPGCC_VER = 9.3.1.11
        else
            $(error Unsupported OS version: $(OS_VERS))
        endif
        endif
        endif
        endif
    else
            $(error Unsupported OS: $(shell uname -v))
    endif
    endif

    LLVM_PKG     = clang-sancus
    LLVM_PKG_SRC = "https://distrinet.cs.kuleuven.be/software/sancus/"
    LLVM_PKG_DES = "Clang with Sancus patches."

    ifeq ($(LLVM_PKG_REL),)
        LLVM_PKG_BAS = $(LLVM_PKG)_$(LLVM_VER)_
    else
        LLVM_PKG_BAS = $(LLVM_PKG)_$(LLVM_VER)-$(LLVM_PKG_REL)_
    endif
    ifeq ($(UNAME_M),x86_64)
        LLVM_PKG_DEB = $(LLVM_PKG_BAS)amd64.deb
    endif
    ifeq ($(UNAME_M),armv7l)
        LLVM_PKG_DEB = $(LLVM_PKG_BAS)armhf.deb
    endif

    ifndef LLVM_PKG_DEB
        $(error Unsupported architecture!)
    else
        $(info LLVM/Clang package: $(LLVM_PKG_DEB))
    endif
else
    TI_MSPGCC_VER = 9.3.1.11
endif

# ---------------------------------------------------------------------------
# Package config for TI MSPGCC

TI_MSPGCC_SRC_DIR = msp430-gcc-$(TI_MSPGCC_VER)-source-full

TI_MSPGCC_SRC_TBZ = $(TI_MSPGCC_SRC_DIR).tar.bz2
TI_MSPGCC_SRC_URL = https://dr-download.ti.com/software-development/ide-configuration-compiler-or-debugger/MD-LlCjWuAbzH/9.3.1.2/$(TI_MSPGCC_SRC_TBZ)

ifeq ($(OTHER),0)
    TI_MSPGCC_PKG     = ti-mspgcc-binutils-sancus
    TI_MSPGCC_PKG_REL = 1
    TI_MSPGCC_PKG_SRC = $(TI_MSPGCC_SRC_URL)
    TI_MSPGCC_PKG_DES = "TI MSP430-GCC binutils for Sancus."
    
    TI_MSPGCC_PKG_BAS = $(TI_MSPGCC_PKG)_$(TI_MSPGCC_VER)-$(TI_MSPGCC_PKG_REL)_
    ifeq ($(UNAME_M),x86_64)
    TI_MSPGCC_PKG_DEB = $(TI_MSPGCC_PKG_BAS)amd64.deb
    endif
    ifeq ($(UNAME_M),armv7l)
    TI_MSPGCC_PKG_DEB = $(TI_MSPGCC_PKG_BAS)armhf.deb
    endif
    
    ifndef TI_MSPGCC_PKG_DEB
     $(error Unsupported architecture!)
    else
     $(info TI MSPGCC package: $(TI_MSPGCC_PKG_DEB))
    endif
endif

# ---------------------------------------------------------------------------
# Configure checkinstall

ifeq ($(OTHER),0)
    ifeq ($(UNAME_M),armv7l)
        # Default checkinstall is buggy:
        # https://github.com/giuliomoro/checkinstall/commit/57ad1473bdfc5aadd2c921d6990e069809f442d4
        CHECKINSTALL = /usr/local/sbin/checkinstall
    else
        CHECKINSTALL = checkinstall
    endif
endif

deb-build-deps:
	$(info .. Installing system-wide Ubuntu/Debian build dependencies)
	$(SUDO) apt-get install -yqq \
            build-essential bison flex texinfo checkinstall

# ---------------------------------------------------------------------------
$(TI_MSPGCC_SRC_TBZ):
	$(WGET) $(TI_MSPGCC_SRC_URL)

$(TI_MSPGCC_SRC_DIR): $(TI_MSPGCC_SRC_TBZ)
	bunzip2 -c $(TI_MSPGCC_SRC_TBZ) | tar -x

ti-mspgcc-build: $(TI_MSPGCC_SRC_DIR)
	cd $(TI_MSPGCC_SRC_DIR)/binutils && \
	  ./configure --target=msp430-elf \
	    --enable-languages=c,c++ --disable-nls \
	    --prefix=$(SANCUS_INSTALL_PREFIX) \
	    --disable-sim --disable-gdb --disable-werror
	cd $(TI_MSPGCC_SRC_DIR)/binutils && \
	  $(MAKE) -j 2

ti-mspgcc-deb: deb-build-deps ti-mspgcc-build
	$(SUDO) mkdir -p $(SANCUS_INSTALL_PREFIX)/msp430-elf/lib
	$(SUDO) mkdir -p $(SANCUS_INSTALL_PREFIX)/share/man
	cd $(TI_MSPGCC_SRC_DIR)/binutils && \
	  echo $(TI_MSPGCC_PKG_DES) >description-pak && \
	  $(SUDO) $(CHECKINSTALL) -y -D --install=no --backup=no \
	  --pkgname=$(TI_MSPGCC_PKG) --pkgversion=$(TI_MSPGCC_VER) \
	  --pkgrelease=$(TI_MSPGCC_PKG_REL) \
	  --pkgsource="$(TI_MSPGCC_PKG_SRC)" \
	  --provides=$(TI_MSPGCC_PKG) \
	  --maintainer=$(PKG_MAINTAINER) \
	  --reset-uids --pakdir=../../ --exclude=/home \
	  --deldoc --deldesc --delspec

ti-mspgcc-inst: ti-mspgcc-build
	$(SUDO) mkdir -p $(SANCUS_INSTALL_PREFIX)/msp430-elf/lib
	cd $(TI_MSPGCC_SRC_DIR)/binutils && \
	  $(SUDO) $(MAKE) install

ti-mspgcc-clean:
	rm -rf $(TI_MSPGCC_SRC_DIR)
	rm -f $(TI_MSPGCC_SRC_TBZ)

ti-mspgcc-distclean: ti-mspgcc-clean
	rm -f $(TI_MSPGCC_PKG_DEB)

# ---------------------------------------------------------------------------
# Optionally patch LLVM/Clang from source
clang_patch: clang.patch
	git submodule init
	git submodule update
	cd clang && \
	  patch -p1 --forward < ../clang.patch; \
	  retCode=$$?; \
	  if [ $$retCode -gt 1 ]; then exit $$retCode; else exit 0; fi

clang_unpatch:
	cd clang && \
	  patch -p1 -R < ../clang.patch

LLVM_BUILD_FLAGS = -DLLVM_TARGETS_TO_BUILD="host;MSP430" \
                   -DLLVM_TARGET_ARCH=host \
                   -DCMAKE_BUILD_TYPE=Release \
                   -DCMAKE_INSTALL_PREFIX=$(SANCUS_INSTALL_PREFIX)

llvm-build: clang_patch
	$(info .. Building and installing patched LLVM/Clang to $(SANCUS_INSTALL_PREFIX))
ifeq ($(UNAME_M),armv7l)
	$(info .. Building LLVM/Clang on/for $(UNAME_M): use 2GiB swap and ld.gold)
endif
	mkdir -p llvm/build
	cd llvm/tools && ln -sf ../../clang clang
	cd llvm/build && cmake $(LLVM_BUILD_FLAGS) ..
	cd llvm/build && $(MAKE) -j 2

llvm-deb: deb-build-deps llvm-build
	$(info .. Building .deb of patched LLVM/Clang to $(SANCUS_INSTALL_PREFIX))
	cd llvm/build/ && \
	  echo $(LLVM_PKG_DES) >description-pak && \
	  $(SUDO) $(CHECKINSTALL) -y -D --install=no --backup=no \
	  --pkgname=clang-sancus --pkgversion=$(LLVM_VER) \
	  --pkgrelease=$(LLVM_PKG_REL) \
	  --pkgsource=$(LLVM_PKG_SRC) \
	  --provides=$(LLVM_PKG) \
	  --maintainer=$(PKG_MAINTAINER) \
	  --reset-uids --pakdir=../../ --exclude=/home \
	  --deldoc --deldesc --delspec

llvm-inst: llvm-build
	$(info .. Installing patched LLVM/Clang to $(SANCUS_INSTALL_PREFIX))
	cd llvm/build && $(SUDO) $(MAKE) install

llvm-clean:
	rm -rf llvm/build/

llvm-distclean: llvm-clean
	rm -f $(LLVM_PKG_DEB)
